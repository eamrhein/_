{"ast":null,"code":"var _jsxFileName = \"/home/eamrhein/jpegup/client/src/util/route.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Redirect, withRouter } from 'react-router-dom'; // Passed in from parent component or from mapStateToProps\n\nconst Auth = ({\n  component: Component,\n  path,\n  loggedIn,\n  exact\n}) => React.createElement(Route, {\n  path: path,\n  exact: exact,\n  render: props => !loggedIn ? React.createElement(Component, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  })) : // Redirect to the tweets page if the user is authenticated\n  React.createElement(Redirect, {\n    to: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n});\n\nconst Protected = ({\n  component: Component,\n  loggedIn,\n  ...rest\n}) => React.createElement(Route, Object.assign({}, rest, {\n  render: props => loggedIn ? React.createElement(Component, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  })) : // Redirect to the login page if the user isn't is already authenticated\n  React.createElement(Redirect, {\n    to: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n})); // Use the isAuthenitcated slice of state to determine whether a user is logged in\n\n\nconst mapStateToProps = state => ({\n  loggedIn: state.session.isAuthenticated\n});\n\nexport const AuthRoute = withRouter(connect(mapStateToProps)(Auth));\nexport const ProtectedRoute = withRouter(connect(mapStateToProps)(Protected));","map":{"version":3,"sources":["/home/eamrhein/jpegup/client/src/util/route.js"],"names":["React","connect","Route","Redirect","withRouter","Auth","component","Component","path","loggedIn","exact","props","Protected","rest","mapStateToProps","state","session","isAuthenticated","AuthRoute","ProtectedRoute"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,kBAA5C,C,CAEA;;AACA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwBC,EAAAA,IAAxB;AAA8BC,EAAAA,QAA9B;AAAwCC,EAAAA;AAAxC,CAAD,KACZ,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAEF,IAAb;AAAmB,EAAA,KAAK,EAAEE,KAA1B;AAAiC,EAAA,MAAM,EAAGC,KAAD,IACxC,CAACF,QAAD,GACC,oBAAC,SAAD,oBAAeE,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,GAGA;AACC,sBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADD;;AAWA,MAAMC,SAAS,GAAG,CAAC;AAAEN,EAAAA,SAAS,EAAEC,SAAb;AAAwBE,EAAAA,QAAxB;AAAkC,KAAGI;AAArC,CAAD,KACjB,oBAAC,KAAD,oBACKA,IADL;AAEC,EAAA,MAAM,EAAEF,KAAK,IACZF,QAAQ,GACP,oBAAC,SAAD,oBAAeE,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADO,GAGR;AACC,sBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADD,C,CAcA;;;AAEA,MAAMG,eAAe,GAAGC,KAAK,KAC5B;AAAEN,EAAAA,QAAQ,EAAEM,KAAK,CAACC,OAAN,CAAcC;AAA1B,CAD4B,CAA7B;;AAIA,OAAO,MAAMC,SAAS,GAAGd,UAAU,CAACH,OAAO,CAACa,eAAD,CAAP,CAAyBT,IAAzB,CAAD,CAA5B;AAEP,OAAO,MAAMc,cAAc,GAAGf,UAAU,CAACH,OAAO,CAACa,eAAD,CAAP,CAAyBF,SAAzB,CAAD,CAAjC","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Redirect, withRouter } from 'react-router-dom';\n\n// Passed in from parent component or from mapStateToProps\nconst Auth = ({ component: Component, path, loggedIn, exact }) => (\n\t<Route path={path} exact={exact} render={(props) => (\n\t\t!loggedIn ? (\n\t\t\t<Component {...props} />\n\t\t) : (\n\t\t// Redirect to the tweets page if the user is authenticated\n\t\t\t<Redirect to=\"/\" />\n\t\t)\n\t)} />\n);\n\nconst Protected = ({ component: Component, loggedIn, ...rest }) => (\n\t<Route\n\t\t{...rest}\n\t\trender={props =>\n\t\t\tloggedIn ? (\n\t\t\t\t<Component {...props} />\n\t\t\t) : (\n\t\t\t// Redirect to the login page if the user isn't is already authenticated\n\t\t\t\t<Redirect to=\"/\" />\n\t\t\t)\n\t\t}\n\t/>\n);\n\n// Use the isAuthenitcated slice of state to determine whether a user is logged in\n\nconst mapStateToProps = state => (\n\t{ loggedIn: state.session.isAuthenticated }\n);\n\nexport const AuthRoute = withRouter(connect(mapStateToProps)(Auth));\n\nexport const ProtectedRoute = withRouter(connect(mapStateToProps)(Protected));\n\n"]},"metadata":{},"sourceType":"module"}